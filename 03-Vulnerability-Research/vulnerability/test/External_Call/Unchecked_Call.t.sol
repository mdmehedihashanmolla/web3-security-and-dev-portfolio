// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test, console} from "forge-std/Test.sol";
import {VulnerableContractUnchecked} from "../../src/External_Call/Unchecked_Call.sol";


contract MaliciousContract {
    receive() external payable {
        revert("I always fail");
    }
}

contract VulnerableContractTest is Test {
    VulnerableContractUnchecked public vulnerableContract;
    address public owner = address(0x1);
    address public user1 = address(0x2);
    address public maliciousContract;
    
    MaliciousContract public malicious;

    function setUp() public {
        vm.deal(owner, 10 ether);
        vm.deal(user1, 5 ether);
        
        vm.prank(owner);
        vulnerableContract = new VulnerableContractUnchecked();
        
        malicious = new MaliciousContract();
        maliciousContract = address(malicious);
        vm.deal(maliciousContract, 1 ether);
    }

    function test_UncheckedCallVulnerability() public {
        vm.prank(owner);
        vulnerableContract.deposit{value: 2 ether}();
        
        uint256 initialOwnerBalance = vulnerableContract.balances(owner);
        uint256 initialMaliciousBalance = maliciousContract.balance;
        
        console.log("Initial owner balance in contract:", initialOwnerBalance);
        console.log("Initial malicious contract balance:", initialMaliciousBalance);
  
        vm.prank(owner);
        vulnerableContract.transferEther(payable(maliciousContract), 1 ether);
        
        uint256 finalOwnerBalance = vulnerableContract.balances(owner);
        uint256 finalMaliciousBalance = maliciousContract.balance;
        
        console.log("Final owner balance in contract:", finalOwnerBalance);
        console.log("Final malicious contract balance:", finalMaliciousBalance);

        assertEq(finalOwnerBalance, initialOwnerBalance - 1 ether);
        
        assertEq(finalMaliciousBalance, initialMaliciousBalance);
        
        console.log("LOST FUNDS:", 1 ether, "wei");
    }

    function test_TransferToEOAStillWorks() public {
        vm.prank(owner);
        vulnerableContract.deposit{value: 2 ether}();
        
        vm.prank(owner);
        vulnerableContract.transferEther(payable(user1), 1 ether);
        
        assertEq(vulnerableContract.balances(owner), 1 ether);
        assertEq(user1.balance, 6 ether); // 5 initial + 1 transferred
    }
}
