// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract Staking {
    mapping(address => uint256) public stakes;
    address[] public stakers;
    uint256 public totalStaked;

    // Stake tokens
    function stake(uint256 amount) external payable {
        require(amount > 0, "Amount must be greater than 0");
        require(msg.value == amount, "Incorrect ETH sent");

        if (stakes[msg.sender] == 0) {
            stakers.push(msg.sender);
        }
        stakes[msg.sender] += amount;
        totalStaked += amount;
    }

    // Off-by-One error in reward distribution
    function distributeRewards() external {
        // Incorrect loop: starts at index 1 instead of 0, skipping the first staker
        for (uint256 i = 1; i < stakers.length; i++) {
            address staker = stakers[i];
            uint256 reward = stakes[staker] / 10; // Simple reward: 10% of stake
            payable(staker).transfer(reward);
        }
    }

    // Function to get stakers list
    function getStakers() external view returns (address[] memory) {
        return stakers;
    }

    receive() external payable {}
}
