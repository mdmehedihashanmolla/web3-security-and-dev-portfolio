// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract VulnerableContractUnchecked {
    address public owner;
    mapping(address => uint256) public balances;

    constructor() {
        owner = msg.sender;
    }

    function transferEther(address payable recipient, uint256 amount) external {
        require(msg.sender == owner, "Only owner");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");

        balances[msg.sender] -= amount; 
    }

    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }

    function withdrawAll() external {
        uint256 bal = balances[msg.sender];
        require(bal > 0, "No balance");
        balances[msg.sender] = 0;
        payable(msg.sender).transfer(bal);
    }
    
    receive() external payable {}
}